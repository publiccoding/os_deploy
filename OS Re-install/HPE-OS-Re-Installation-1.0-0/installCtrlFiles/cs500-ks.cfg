# Authentication options
auth --useshadow --passalgo=sha512

# Install from the first CD-ROM drive on the system
cdrom

# Firewall configuration
firewall --disabled

# Setup Agent is not started the first time the system boots
firstboot --disable

# Install OS instead of upgrade
install

# Set system keyboard type
keyboard --vckeymap=us --xlayouts='us'

# Sets language to use during installation and default language to use on the installed system
lang en_US.UTF-8

# Configure network information for the system
network --noipv6

# Reboot after the installation is successfully completed
reboot

# Configure additional yum repositories
repo --name="Server-HighAvailability" --baseurl=file:///run/install/repo/addons/HighAvailability
repo --name="Server-ResilientStorage" --baseurl=file:///run/install/repo/addons/ResilientStorage
repo --name="SAP_HANA_RPMS" --baseurl=file:///run/install/repo/addons/SAPHana
repo --name="Security_Patches" --baseurl=file:///run/install/repo/addons/SecurityPatches

# Set root password
rootpw --iscrypted $1$0ZicvUK1$fIDGWPeaZ5zx9KsUB99hX.

# Set the state of SELinux on the installed system
selinux --disabled

# Enable/disable services
services --disabled=abrtd,abrt-ccpp,avahi-daemon,chronyd,kdump,lvm2-lvmetad,multipathd,ntpdate,NetworkManager,NetworkManager-wait-online,openwsmand,rhsmcertd,sendmail --enabled=network,ntpd

# Perform the kickstart installation in text mode
text

# Set the system time zone
timezone America/New_York --isUtc

###############################################################################################
# pre script
###############################################################################################
%pre --log=/var/log/preInstallScript.log
#!/bin/bash

exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6

#List of current kernel parameters.
bootloader_append="rhgb quiet rd_NO_PLYMOUTH nosoftlockup intel_pstate=disable intel_idle.max_cstate=1 processor.max_cstate=1 mce=ignore_ce elevator=noop biosdevname=1 transparent_hugepage=never vga=normal console=ttyS0,115200"

#Device on which the OS will be installed.
choose_device() {
        echo ""
        read -p "                                Choose the OS device to overwrite: " choice

	#Return if an invalid choice was made.
        if ! [[ $choice == [1-9]* && $choice -le $(wc -l /tmp/options |cut -d' ' -f1) ]]; then
                return 1
        fi

        device=$(awk "NR==$choice" /tmp/options |awk -F' ' '{print $2" "$3$4}')

        while true; do
                echo ""
                echo -e "\t\t\t\t1. Overwrite OS device \"${device}\" and continue installation."
                echo -e "\t\t\t\t2. Display debug information."
                echo -e "\t\t\t\t3. Reboot system."
                echo -e "\t\t\t\t4. Halt system."
                echo ""

                read -p "                                Choose an option: " choice

                case $choice in
                        1)
				os_device=$(echo $device |awk '{print $1}')

                                #Add OS device setup to kickstart include file
                                echo "#Partition clearing information" >/tmp/ks-include.cfg
                                echo "clearpart --initlabel --all --drives=${os_device}" >> /tmp/ks-include.cfg
                                echo "" >>/tmp/ks-include.cfg

                                echo "#Disk partitioning information" >>/tmp/ks-include.cfg
                                echo "part /boot/efi --fstype=efi --size=256 --ondisk=${os_device}" >>/tmp/ks-include.cfg
                                echo "part swap --fstype=swap --size=2048 --label=SWAP --ondisk=${os_device}" >>/tmp/ks-include.cfg
                                echo "part / --fstype=xfs --size=102400 --grow --label=ROOT --ondisk=${os_device}" >>/tmp/ks-include.cfg
                                echo "" >>/tmp/ks-include.cfg

                                #Add bootloader to kickstart include file
                                echo "#System bootloader information" >>/tmp/ks-include.cfg
                                echo "bootloader --boot-drive=$os_device --append=\"${bootloader_append}\"" >>/tmp/ks-include.cfg

                                return 0
                                ;;
                        2)
                                clear
                                dmidecode -t 1
                                fdisk -l 2>/dev/null|grep "Disk /dev/" |grep -v 'mapper' |sort
                                read -s -n 1 -p "<Press any key to continue>"
                                return 2
                                ;;
                        3)
                                echo b > /proc/sysrq-trigger
                                while true; do sleep 1; done
                                ;;
                        4)
                                echo o > /proc/sysrq-trigger
                                while true; do sleep 1; done
                                ;;
                        *)
                                echo -e "\t\t\t\tAn invalid selection was made; please try again."
                                ;;
                esac
        done
}

check_validity() {
        while true; do
                choose_device
                ret_val=$?

                if [[ $ret_val -eq 1 ]]; then
                        echo -e "\t\t\t\tAn invalid selection was made; please try again."
                elif [[ $ret_val -eq 2 ]]; then
                        return 2
                else
                        return 0
                fi
        done
}

localStorage() {
        while true; do
                clear
                rm -f /tmp/options

                fdisk -l 2>/dev/null|grep "Disk /dev/" |grep -v 'mapper' |sort >/tmp/diskInfo
                echo -e "\t\t\tAvailable storage devices:"

                for (( i=1; i<=$(wc -l /tmp/diskInfo |cut -d' ' -f1); i++ )) do
                        disk=$(awk -F'[ :]' '{print $2}' /tmp/diskInfo |awk "NR==$i")
                        size=$(awk -F'[:,]' '{print $2}' /tmp/diskInfo |awk "NR==$i")
                        echo -e "\t\t\t\t$((i)). $disk\t$size" |tee -a /tmp/options
                done

                check_validity
                ret_val=$?

                if [[ $ret_val -ne 2 ]]; then
                        rm -f /tmp/diskInfo /tmp/options
                        break
                fi
        done
}

sanStorage() {
        while true; do
                echo ""
                echo -e "\t\t\t\t1. Overwrite LUN device \"${os_device}\" and continue installation."
                echo -e "\t\t\t\t2. Display debug information."
                echo -e "\t\t\t\t3. Reboot system."
                echo -e "\t\t\t\t4. Halt system."
                echo ""

                read -p "                                Choose an option: " choice

                case $choice in
                        1)
                                #Add OS device setup to kickstart include file
                                echo "#Partition clearing information" >/tmp/ks-include.cfg
                                echo "clearpart --initlabel --all --drives=${os_device}" >> /tmp/ks-include.cfg
                                echo "" >>/tmp/ks-include.cfg

                                echo "#Disk partitioning information" >>/tmp/ks-include.cfg
                                echo "part /boot/efi --fstype=efi --size=256 --ondisk=${os_device}" >>/tmp/ks-include.cfg
                                echo "part swap --fstype=swap --size=2048 --label=SWAP --ondisk=${os_device}" >>/tmp/ks-include.cfg
                                echo "part / --fstype=xfs --size=102400 --grow --label=ROOT --ondisk=${os_device}" >>/tmp/ks-include.cfg
                                echo "" >>/tmp/ks-include.cfg

                                #Add bootloader to kickstart include file
                                echo "#System bootloader information" >>/tmp/ks-include.cfg
                                echo "bootloader --boot-drive=$os_device --append=\"${bootloader_append}\"" >>/tmp/ks-include.cfg

                                return 0
                                ;;
                        2)
                                clear
				dmidecode -t 1
				ls -lsi /dev/mapper
				ls -lsi /dev/disk/by-id
                                read -s -n 1 -p "<Press any key to continue>"
                                ;;
                        3)
                                echo b > /proc/sysrq-trigger
                                while true; do sleep 1; done
                                ;;
                        4)
                                echo o > /proc/sysrq-trigger
                                while true; do sleep 1; done
                                ;;
                        *)
                                echo -e "\t\t\t\tAn invalid selection was made; please try again."
                                ;;
                esac
        done
}

localStorage

chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

%end

#Include bootloader and partition information that was created by the pre script.
%include /tmp/ks-include.cfg

#Software environment and package section.
%packages
@base
@console-internet
@core
@gnome-desktop
@graphical-admin-tools
@hardware-monitoring
@internet-browser
@kde-desktop
@perl-runtime
@x11

authd
autofs
-btrfs-progs
chrony  
cifs-utils
cim-schema
convmv
cpp
cpufrequtils
crash
crypto-utils
cryptsetup-reencrypt 
deltarpm
device-mapper-multipath
dialog
diffstat
dos2unix
dstat
expect
finger
firstboot
gc
gcc
gedit
genisoimage
giflib  
git
glib2-devel
-gnome-boxes
graphviz
grub2-efi-x64-modules  
hesiod
httpd
-icedtea-web
iptraf
java-1.7.0-openjdk
java-1.7.0-openjdk-headless
-java-1.8.0-openjdk
-java-1.8.0-openjdk-headless
java
jpackage-utils
jre
kernel-devel
kexec-tools  
keyutils-libs-devel
krb5-devel
krb5-workstation
ksh
libcom_err-devel
libgomp
-libibcm
libibmad
libibumad
-libibverbs
libICE  
libicu
-libmthca
libpng12
-librdmacm
-librdmacm-utils
libreport-gtk
libselinux-devel
libsepol-devel
libstdc++-devel
libsysfs  
-libvirt-daemon-kvm
lm_sensors
lsscsi  
lvm2
mc
memcached 
memtest86+  
mpfr
mstflint
net-snmp
net-snmp-utils
net-tools
nfs-utils
ntp
numactl
numad  
openslp
opensm
openssl-devel  
openssl098e
OpenIPMI  
openwsman-server  
PackageKit-gtk3-module  
patch  
pcsc-lite
perl-Newt
perl-Sys-Syslog	 
pixman
policycoreutils-python  
procmail
python-devel
python-linux-procfs 
python-meh
python-schedutils  
-qemu-kvm
rear
rdma	
rear	
redhat-lsb-core
redhat-rpm-config
resource-agents
rpm-build
rsh
screen
sendmail	
sg3_utils
sysfsutils
syslinux
system-config-date
system-config-date-docs
systemtap
tagsoup	
telnet
tftp-server
tigervnc-server
tk
tmpwatch
tog-pegasus
tog-pegasus-libs
ttmkfdir	
tuned
tuned-utils  
tzdata-java-2017b 
unixODBC
uuidd
vsftpd
xferstats
xinetd
xterm
xulrunner
xorg-x11-fonts-Type1	
yum-plugin-versionlock
zlib-devel
sapconf
resource-agents-sap-hana
tuned-profiles-sap-hana
compat-sap-c++-7

%end


###############################################################################################
# post script
###############################################################################################
%post --log=/var/log/postInstallScript.log
#!/bin/bash


#Enable compression for Kdump/makedumpfile.
sed -i 's/\(core_collector makedumpfile\).*/\1 -d 31 -c/' /etc/kdump.conf

#Remove the network configuration files created by the install.
rm -f /etc/sysconfig/network-scripts/ifcfg-en*

#Disable lvmetad in lvm.conf as recommended by redhat.
sed -i 's/\(use_lvmetad =\).*/\1 0/' /etc/lvm/lvm.conf

#Disable ipv6 as recommended by SAP.
echo "install ipv6 /bin/true" > /etc/modprobe.d/noipv6.conf

#Enable multipathd if there is external storage present.
lspci | grep "Fibre Channel" > /dev/null 2>&1
RESULT=$?

if [[ $RESULT -eq 0 ]]; then
	systemctl enable multipathd.service
	systemctl start multipathd.service
fi

#Apply additional tuning if the server is a Scale-up.
df -h /boot/efi|egrep -o '/dev/sd[a-z]{1}[0-9]{1}'
RESULT=$?

if [[ $RESULT -eq 0 ]]; then
	mkdir -p /opt/hpe/tunes

	cat <<-EOF> /opt/hpe/tunes/apply_tunes-RH.sh
		#!/bin/bash


		########################################################################################
		#The apply_tunes-RH.sh file sets RHEL tuning parameters for the HANA log and data
		#filesystems on a SAP HANA Scale-up system.
		########################################################################################

		#Device on which vgHANA is created
		vgHanaLocation=\$(pvs|grep vgHANA|awk '{print \$1}'|awk -F '/' '{print \$3}')

		#Get mapper device for data
		DATA_DM_PATH=\$(ls -l /dev/mapper/vgHANA-lv*data | awk -F '../' '{print \$5}')

		#Get mapper device for log
		LOG_DM_PATH=\$(ls -l /dev/mapper/vgHANA-lv*log | awk -F '../' '{print \$5}')

		#Set the scheduler
		echo "noop" > /sys/block/\$vgHanaLocation/queue/scheduler

		#Set max_sectors_kb to 128
		echo "128"  >  /sys/block/\$vgHanaLocation/queue/max_sectors_kb
		echo "128" >  /sys/block/\$DATA_DM_PATH/queue/max_sectors_kb
		echo "128" > /sys/block/\$LOG_DM_PATH/queue/max_sectors_kb

		#Set nr_requests to 1024
		echo "1024" > /sys/block/\$vgHanaLocation/queue/nr_requests

		#Set queue_depth to 64
		echo "64" > /sys/block/\$vgHanaLocation/device/queue_depth
	EOF


	chmod 755 /opt/hpe/tunes/apply_tunes-RH.sh

	cat<<-EOF > /etc/systemd/system/hanaTunes.service
		[Unit]
		Description=Set tuning paramters for the SAP HANA log and data filesystems.
		After=lvm2-monitor.service

		[Service]
		Type=oneshot
		ExecStart=/opt/hpe/tunes/apply_tunes-RH.sh

		[Install]
		WantedBy=default.target
	EOF

	chmod 664 /etc/systemd/system/hanaTunes.service

	systemctl daemon-reload
	systemctl enable hanaTunes.service
	systemctl start hanaTunes.service

fi

#Configure /etc/hpe-release.
cat <<-EOF> /etc/hpe-release
	HPE SAP HANA CoE CS500 Release 1.0-0
	Installed on `date +'%b %d, %Y'` @ `date +'%H:%M:%S'`.
EOF

#Configure tuning parameters, which will be used by sapconf.
echo "Configuring tuning parameters."
mkdir -p /usr/lib/tuned/sap-hpe-hana
cat<<-EOF > /usr/lib/tuned/sap-hpe-hana/tuned.conf
	######################################################
	#
	# tuned configuration for HPE SAP HANA.
	# Derived from RHEL/SAP 'sap-hana' profile
	# provided by 'sapconf' RPM
	#
	# Allows HPE SAP HANA specific tunings
	#
	######################################################

	[main]
	include = sap-hana

	[cpu]
	# SAP NOTE 2292690
	force_latency = 70

	#Network parameters added . SAP Note 2382421
	[sysctl]
	net.core.somaxconn=4096
	net.ipv4.tcp_max_syn_backlog = 8192
	net.ipv4.ip_local_port_range = 1024 64999
	net.ipv4.tcp_tw_reuse  = 1
	net.ipv4.tcp_tw_recycle  = 1
	net.ipv4.tcp_timestamps = 1
	net.ipv4.tcp_syn_retries = 8
	# recommended values taken from SLES image
	net.ipv4.tcp_mem = 10000000    10000000       10000000
	net.ipv4.tcp_wmem = 10000000   10000000       10000000
	net.ipv4.tcp_rmem = 10000000   10000000       10000000
	net.ipv4.tcp_window_scaling  = 1
	net.core.rmem_default = 64000000
	net.core.rmem_max = 64000000
	net.core.wmem_default = 64000000
	net.core.wmem_max = 64000000
EOF

#Start tuned
tunedStatus=$(systemctl is-active tuned.service)

if [[ $tunedStatus != 'active' ]]; then
	systemctl start tuned.service
	sleep 5
fi

#Set the tuned profile to sap-hpe-hana.
tuned-adm profile sap-hpe-hana

#Configure /etc/motd.
cat<<-EOF > /etc/motd
	This is RHEL for SAP Applications on a HPE CS500 SAP HANA Converged System.
EOF

#Apply the HPE SAP HANA tuned profile.
tuned-adm profile sap-hpe-hana

#Remove /boot/initramfs-3.10.0-693.el7.x86_64.img if present, since it has been found to get left behind.
if [[ -e /boot/initramfs-3.10.0-693.el7.x86_64.img ]]; then
	rm -rf /boot/initramfs-3.10.0-693.el7.x86_64.img
fi

#Disable kdump and openwsmand if they are enabled, since they have been found to still be enabled.
serviceList=(kdump.service openwsmand.service)

for service in ${serviceList[*]}; do
        status=$(systemctl is-enabled $service)

        if [[ $status == 'enabled' ]]; then
                systemctl disable $service
        fi
done

%end
