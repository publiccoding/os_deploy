#!/usr/bin/python

import logging
import os
import optparse
import subprocess
import computeNode
import gaUtils
import gaUpdate


def init():
	if os.geteuid() != 0:
		print "You must be root to run this program."
		exit(1)

	usage = 'usage: %prog [-g -f CSUR_FILENAME [-d]] or [-u -f CSUR_FILENAME [-d]]'

	parser = optparse.OptionParser(usage=usage)

	parser.add_option('-d', action='store_true', default=False, help='This option is used to collect debug information.', metavar=' ')
	parser.add_option('-f', action='store', help='This option is mandatory and requires its argument to be the data file containing CSUR reference information.', metavar='FILENAME')
	parser.add_option('-g', action='store_true', default=False, help='This option is used to collect system Gap Analysis data.', metavar=' ')
	parser.add_option('-u', action='store_true', default=False, help='This option is used when a system update is to be performed.', metavar=' ')

	(options, args) = parser.parse_args()

	if not options.f:
		parser.print_help()
		exit(1)
	else:
		csurDataFile = options.f

	if options.g == False and options.u == False:
		parser.print_help()
		exit(1)

	if options.g and options.u:
		parser.print_help()
		exit(1)

	if options.g:
		action = 'gapAnalysis'
	else:
		action = 'csurUpdate'

	try:
		fh = open(csurDataFile)
		csurData = fh.readlines()
	except IOError, e:
		print "Unable to open " + csurDataFile + " for reading.\n, e"
		exit(1)

	fh.close()

	#Always start with a new log file.
	try:
		if os.path.isfile(logFile):
			os.remove(logFile)
	except IOError, e:
		print "Unable to access " + logFile + " for writing.\n, e"
		exit(1)

	handler = logging.FileHandler(logFile)

	if options.d:
		gaUtils.setLogLevel('DEBUG')
		logger.setLevel(logging.DEBUG)
		handler.setLevel(logging.DEBUG)
	else:
		gaUtils.setLogLevel('INFO')
		logger.setLevel(logging.INFO)
		handler.setLevel(logging.INFO)

	formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(message)s', datefmt='%m/%d/%Y %H:%M:%S')
	handler.setFormatter(formatter)
	logger.addHandler(handler)

	#Need OS distribution level which is needed to determine driver information.
	if os.path.isfile('/etc/products.d/SUSE_SLES_SAP.prod'):
		command = "egrep -o \"<version>[0-9]{2}\.[0-9]\" /etc/products.d/SUSE_SLES_SAP.prod|sed -re 's/<version>[0-9]{2}\.//'"
	else:
		print "/etc/products.d/SUSE_SLES_SAP.prod does not exist.\n"
		exit(1)

	result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
	out, err = result.communicate()

	if err != '':
		print "Unable to get OS distribution level.\n" + err
		exit(1)
	else:
		OSDistLevel = 'SP' + out.strip()

	command = "dmidecode -s system-product-name|awk '{print $2}'"
	result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
	out, err = result.communicate()

	if err != '':
		print "Unable to get system model.\n" + err
		exit(1)
		
	systemModel = out.strip()	

	return  csurDataFile, csurData, action, OSDistLevel, systemModel
#End init()
		
	
#####################################################################################################
# Main program starts here.
#####################################################################################################
logger = logging.getLogger()
logFile = 'application.log'  ##Change this later
firmwareToUpdate = []

csurDataFile, csurData, action, OSDistLevel, systemModel = init()

if systemModel == 'DL580':
	computeNode = computeNode.DL580ComputeNode(systemModel, OSDistLevel)

firmwareDict = computeNode.getFirmwareDict(csurData[:])
computeNode.getStorageFirmwareInventory(firmwareDict.copy(), firmwareToUpdate)
computeNode.getNICFirmwareInventory(firmwareDict.copy(), firmwareToUpdate)
computeNode.getRemainingFirmwareInventory(firmwareDict.copy(), firmwareToUpdate)
driversToUpdate = computeNode.getDriverInventory(csurData[:])
softwareToUpdate = computeNode.getSoftwareInventory(csurData[:])

if action != 'csurUpdate':
	exit(0)

if len(softwareToUpdate) != 0:
	updateDict = gaUtils.getPackageDict(softwareToUpdate[:], 'software', csurDataFile)	
	gaUpdate.updateSoftware(updateDict.copy())
		
if len(driversToUpdate) != 0:
	updateDict = gaUtils.getPackageDict(driversToUpdate[:], 'drivers', csurDataFile, OSDistLevel)	
	gaUpdate.updateDrivers(updateDict.copy())

if len(firmwareToUpdate) != 0:
	updateDict = gaUtils.getPackageDict(firmwareToUpdate[:], 'firmware', csurDataFile)	
	gaUpdate.updateFirmware(updateDict.copy())
