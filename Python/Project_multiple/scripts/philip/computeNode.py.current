import re
import socket
import os
import subprocess
import gaUtils


#This is the main compute node class from which other compute nodes can be instantiated as necessary.
class ComputeNode():

	def __init__(self, systemModel, OSDistLevel):
		self.systemModel = systemModel
		self.OSDistLevel = OSDistLevel
		self.hostname = socket.gethostname()
		self.gapAnalysisFile = self.hostname + '_gapAnalysis.dat'
	#End __init__(self, systemModel, OSDistLevel)


	def getFirmwareDict(self, csurData):
		started = False
		firmwareDict = {}

		gaUtils.log("Begin Getting Firmware Dictionary", "info")

		for data in csurData:
			if not re.match(r'Firmware.*', data) and not started:
				continue
			elif re.match(r'Firmware.*', data):
				started = True
				continue
			elif re.match(r'\s*$', data):
				break
			else:
				firmwareList = data.split('|')
				firmwareDict[firmwareList[0].strip()] = firmwareList[1].strip()

		gaUtils.log("firmwareDict = " + str(firmwareDict), "debug")
		gaUtils.log("End Getting Firmware Dictionary", "info")
		return firmwareDict
	#End getFirmwareDict(csurData)


	def getStorageFirmwareInventory(self, firmwareDict, updateList):
		count = 0
		hardDriveModels = []
		hardDriveDict = {}
		hardDriveUpdateDict = {}

		fh = open(self.gapAnalysisFile, 'w')

		gaUtils.log("Begin Getting Storage Firmware Inventory", "info")
		gaUtils.log("firmwareDict = " + str(firmwareDict), "debug")
		gaUtils.log("updateList = " + ":".join(updateList), "debug")

		fh.write(gaUtils.conversion("Firmware:\n"))

		#hpacucli has been replaced by hpssacli so we need to check in case we are on an older system.
		if os.path.isfile('/usr/sbin/hpssacli'):
			arrayCfgUtilFile = '/usr/sbin/hpssacli'
		else:
			arrayCfgUtilFile = '/usr/sbin/hpacucli'

		gaUtils.log("arrayCfgUtilFile = " + arrayCfgUtilFile, "debug")

		#Get list of storage controllers.
		command = arrayCfgUtilFile + " ctrl all show status|egrep -o \"P.*Slot\s*[0-9]{1,2}\"|awk '{print $1\":\"$NF}'"
		result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
		out, err = result.communicate()

		if err != '':
			gaUtils.log(err, "error")
		gaUtils.log("out = " + out, "debug")

		controllerList = out.splitlines()

		for controller in controllerList:
			controllerModel = controller[0:controller.index(':')]
			controllerSlot = controller[controller.index(':')+1:len(controller)]

			csurFirmwareVersion = firmwareDict.get(controllerModel)

			command = arrayCfgUtilFile + " ctrl slot=" + controllerSlot + " show |grep \"Firmware Version\"|awk '{print $3}'"

			result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
			out, err = result.communicate()

			if err != '':
				gaUtils.log(err, "error")
			gaUtils.log("out = " + out, "debug")

			installedFirmwareVersion = out.strip()

			if installedFirmwareVersion != csurFirmwareVersion:
				updateList.append(controllerModel)

			fh.write(gaUtils.conversion(controllerModel + "|" + csurFirmwareVersion + "|" + installedFirmwareVersion + "\n"))

			if controllerModel == 'P812':
				csurFirmwareVersion = firmwareDict.get('D2700')
				command = arrayCfgUtilFile + " ctrl slot=" + controllerSlot + " enclosure all show  detail|grep -m 1  \"Firmware Version\"|awk '{print $3}'"
				result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
				out, err = result.communicate()

				if err != '':
					gaUtils.log(err, "error")
				gaUtils.log("out = " + out, "debug")

				installedFirmwareVersion = out.strip()

				if installedFirmwareVersion != csurFirmwareVersion:
					updateList.append('D2700')

				fh.write(gaUtils.conversion("D2700|" + csurFirmwareVersion + "|" + installedFirmwareVersion + "\n"))

			#Get a list of all hard drives and thier firmware version.
			command = arrayCfgUtilFile + " ctrl slot=" + controllerSlot + " pd all show detail|grep -A 2 --no-group-separator \"Firmware Revision\"|grep -v Serial|sed -e '$!N;s/\\n/ /'|awk '{print $6, $3}'|sort -k1"

			result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
			out, err = result.communicate()

			if err != '':
				gaUtils.log(err, "error")
			gaUtils.log("out = " + out, "debug")

			hardDriveList = out.splitlines()

			#Get a unique list of hard drives managed by the controller.
			for hd in hardDriveList:
				hardDriveData = hd.split()

				if count == 0:
					hardDriveModels.append(hardDriveData[0].strip())
					tmpHardDriveModel = hardDriveData[0]
					count += 1
				elif hardDriveData[0] != tmpHardDriveModel:
					hardDriveModels.append(hardDriveData[0].strip())
					tmpHardDriveModel = hardDriveData[0]

			#Now check each hard drive's firmware version.
			for hardDriveModel in hardDriveModels:
				count = 0

				csurFirmwareVersion = firmwareDict.get(hardDriveModel)

				#This acounts for the cases where the CSUR did not include a hard drive's firmware.
				if csurFirmwareVersion is None:
					if not hardDriveDict.has_key(hardDriveModel):
						hardDriveDict[hardDriveModel] = ''
						csurFirmwareVersion = 'Missing'
						fh.write(gaUtils.conversion(hardDriveModel + "|" + csurFirmwareVersion + "| \n"))
					continue

				for hd in hardDriveList:
					hardDriveData = hd.split()
					if hardDriveData[0].strip() == hardDriveModel:
						if hardDriveData[1].strip() != csurFirmwareVersion:
							if not hardDriveDict.has_key(hardDriveModel):
								hardDriveDict[hardDriveModel] = ''
								if not hardDriveUpdateDict.has_key(hardDriveModel):
									updateList.append(hardDriveModel)
								fh.write(gaUtils.conversion(hardDriveModel + "|" + csurFirmwareVersion + "|" + hardDriveData[1].strip() + "\n"))
								count += 1
							break

				if count == 0:
					if not hardDriveDict.has_key(hardDriveModel):
						hardDriveDict[hardDriveModel] = ''
						fh.write(gaUtils.conversion(hardDriveModel + "|" + csurFirmwareVersion + "|" + hardDriveData[1].strip() + "\n"))

			#Clear the list for the next iteration.
			hardDrives = []
		fh.close()
		gaUtils.log("End Getting Storage Firmware Inventory", "info")
	#End getStorageFirmwareInventory(firmwareDict, updateList)


	def getNICFirmwareInventory(self, firmwareDict, updateList):
		nicCardModels = []
		count = 0

		gaUtils.log("Begin Getting NIC Firmware Inventory", "info")
		gaUtils.log("firmwareDict = " + str(firmwareDict), "debug")
		gaUtils.log("updateList = " + ":".join(updateList), "debug")
		nicCardList = self.getNicCardList()

		#Get a unique list of nic card models.
		for nd in nicCardList:
			nicCardData = nd.split()

			if count == 0:
				nicCardModels.append(nicCardData[1].strip())
				tmpNicCardModel = nicCardData[1]
				count += 1
			elif nicCardData[1] != tmpNicCardModel:
				nicCardModels.append(nicCardData[1].strip())
				tmpNicCardModel = nicCardData[1]

		#Get hwinfo which will be used to map nic card bus to nic device.
		fh = open("hwinfo.log", 'w')
		subprocess.call(["hwinfo", "--network"], stdout=fh)
		fh.close()

		fh = open(self.gapAnalysisFile, 'a')

		#Loop through all nic cards to check thier firmware.  Only record one occcurance of a mismatch.
		for nicCardModel in nicCardModels:
			count = 0
			csurNicCardFirmwareVersion = firmwareDict.get(nicCardModel)

			for data in nicCardList:
				nicCardData = data.split()

				nicBus = nicCardData[0].strip()
				installedNicCardModel = nicCardData[1].strip()

				if installedNicCardModel == nicCardModel:

					command = "grep -A 5 " + nicBus + " hwinfo.log|grep \"Device File\"|awk '{print $3}'"
					result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
					out, err = result.communicate()

					if err != '':
						gaUtils.log(err, "error")
					gaUtils.log("out = " + out, "debug")

					nicDevice = out.strip()

					command = "ethtool -i " + nicDevice + "|grep firmware-version|awk '{print $NF}'"
					result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
					out, err = result.communicate()

					if err != '':
						gaUtils.log(err, "error")
					gaUtils.log("out = " + out, "debug")

					installedFirmwareVersion = out.strip()

					if installedFirmwareVersion != csurNicCardFirmwareVersion and count == 0:
						updateList.append(nicCardModel)
						fh.write(gaUtils.conversion(nicCardModel + "|" + csurNicCardFirmwareVersion + "|" + installedFirmwareVersion + "\n"))
						count += 1
						break

			if count == 0:
				fh.write(gaUtils.conversion(nicCardModel + "|" + csurNicCardFirmwareVersion + "|" + installedFirmwareVersion + "\n"))
		os.remove("hwinfo.log")
		fh.close()
		gaUtils.log("End Getting NIC Firmware Inventory", "info")
	#End getNICFirmwareInventory(firmwareDict, updateList)

	def getNicCardList(self):
		nicCardList = []
		commands = []
		count = 0

		if self.systemModel == 'DL580G7' or self.systemModel =='DL980G7' or self.systemModel =='BL680cG7':
			commands.append("lspci -v|grep -B1 NC --no-group-separator|sed -e '$!N;s/\\n/ /'|uniq -w 2|egrep -io \".{2}:.{2}\.[0-9]{1}|NC[0-9]+[a-z]{1,3}\"|sed -e '$!N;s/\\n/ /'| sort -k2")
		elif self.systemModel == 'DL580G8':
			commands.append("lspci -v|grep 'NetXtreme BCM5719'|uniq -w 2|egrep -io \".{2}:.{2}\.[0-9]{1}\"") ##HP 331FLR
			commands.append("HP331FLR")
			commands.append("lspci -v|grep 'Intel Corporation 82599EB'|uniq -w 2|egrep -io \".{2}:.{2}\.[0-9]{1}\"") #HP 560SFP+
			commands.append("HP560SFP")

		while count < len(commands):
			command = commands[count]
			result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
			out, err = result.communicate()

			if err != '':
				gaUtils.log(err, "error")
			gaUtils.log("out = " + out, "debug")

			if len(commands) == 1:
				nicCardList = out.splitlines()
			else:
				tmpList = out.splitlines()
				nicCardList.extend(x + ' ' + commands[count + 1] for x in tmpList)

			count += 2
		return nicCardList
	#End getNicCardList():


	def getCommonFirmwareInventory(self, firmwareDict, updateList):
		biosFirmwareType = "BIOS" + self.systemModel
			
		fh = open(self.gapAnalysisFile, 'a')

		gaUtils.log("Begin Getting Compute Node Common Firmware Inventory", "info")
		gaUtils.log("firmwareDict = " + str(firmwareDict), "debug")
		gaUtils.log("updateList = " + ":".join(updateList), "debug")

		#BIOS
		command = "dmidecode -s bios-release-date"
		result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
		out, err = result.communicate()

		if err != '':
			gaUtils.log(err, "error")
		gaUtils.log("out = " + out, "debug")

		biosFirmwareDate = out.strip()
		biosFirmwareDateList = biosFirmwareDate.split('/')
		installedFirmwareVersion = biosFirmwareDateList[2] + '.' + biosFirmwareDateList[0] + '.' + biosFirmwareDateList[1]

		csurFirmwareVersion = firmwareDict.get(biosFirmwareType)

		if installedFirmwareVersion != csurFirmwareVersion:
			updateList.append(biosFirmwareType)

		fh.write(gaUtils.conversion(biosFirmwareType + "|" + csurFirmwareVersion + "|" + installedFirmwareVersion + "\n"))

		#iLO
		command = "hponcfg -g|grep \"Firmware Revision\"|awk '{print $4}'"
		result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
		out, err = result.communicate()

		if err != '':
			gaUtils.log(err, "error")
		gaUtils.log("out = " + out, "debug")

		installedFirmwareVersion = out.strip()

		if installedFirmwareVersion != firmwareDict.get('iLO'):
			updateList.append('iLO')

		fh.write(gaUtils.conversion('iLO' + "|" + firmwareDict.get('iLO') + "|" + installedFirmwareVersion + "\n"))
		fh.close()
		gaUtils.log("End Getting Compute Node Common Firmware Inventory", "info")
	#End getCommonFirmwareInventory(firmwareDict, updateList)


	def getDriverInventory(self, csurData):
		started = False
		updateDriverList = []

		gaUtils.log("Begin Getting Driver Inventory", "info")
		gaUtils.log("csurData = " + ":".join(csurData), "debug")

		fh = open(self.gapAnalysisFile, 'a')

		fh.write(gaUtils.conversion("Driver:\n"))

		regex = re.escape(self.OSDistLevel) + r".*" + re.escape(self.systemModel) + r".*"

		for data in csurData:
			if not re.match(regex, data) and not started:
				continue
			elif re.match(regex, data):
				started = True
				continue
			elif re.match(r'\s*$', data):
				break
			else:
				csurDriverList = data.split('|')
				csurDriver = csurDriverList[0].strip()
				csurDriverVersion = csurDriverList[1].strip()

				if csurDriver == 'nx_nic' or  csurDriver == 'FusionIO':
					continue

				command = "modinfo " + csurDriver + "|grep -i ^version|awk '{print $2}'"
				result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
				out, err = result.communicate()

				if err != '':
					gaUtils.log(err, "error")
				gaUtils.log("out = " + out, "debug")

				installedDriverVersion = out.strip()

				fh.write(gaUtils.conversion(csurDriver + "|" + csurDriverVersion + "|" + installedDriverVersion + "\n"))

				if installedDriverVersion != csurDriverVersion:
					updateDriverList.append(csurDriver)
		fh.close()

		gaUtils.log("updateDriverList = " + ":".join(updateDriverList), "debug")
		gaUtils.log("End Getting Driver Inventory", "info")
		return updateDriverList
	#End getDriverInventory(csurData)


        def getSoftwareInventory(self, csurData):
                started = False
                updateSoftwareList = []

                gaUtils.log("Begin Getting Software Inventory", "info")
                gaUtils.log("csurData = " + ":".join(csurData), "debug")

                fh = open(self.gapAnalysisFile, 'a')

                fh.write(gaUtils.conversion("Software:\n"))

		regex = r".*" + re.escape(OSDistLevel) + r".*" + re.escape(systemModel) + r".*"

                for data in csurData:
                        if not re.match(r'Software.*', data) and not softwareFound:
                                continue
                        elif re.match(r'Software.*', data):
                                softwareFound = True
                                continue
                        elif not re.match(regex, data) and not started:
                                continue
                        elif re.match(regex, data):
                                started = True
                                continue
                        elif re.match(r'\s*$', data):
                                break
                        else:
                                csurSoftwareList = data.split('|')
                                csurSoftware = csurSoftwareList[0].strip()
                                csurSoftwareEpoch = csurSoftwareList[1].strip()
                                csurSoftwareVersion = csurSoftwareList[2].strip()

                                command = "rpm -q --queryformat=\"%{buildtime} %{version}-%{release}\" " + csurSoftware + " 2> /dev/null"
                                result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
                                out, err = result.communicate()

                                if err != '':
                                        gaUtils.log(err, "error")
                                gaUtils.log("out = " + out, "debug")

                                if result.returncode != 0:
                                        fh.write(gaUtils.conversion(csurSoftware + "|" + csurSoftwareVersion + "|Missing\n"))
                                        updateSoftwareList.append(csurSoftware + "-")
                                        continue

                                installedSoftware = out.strip()
                                installedSoftwareList = installedSoftware.split()
                                installedSoftwareEpoch = installedSoftwareList[0]
                                installedSoftwareVersion = installedSoftwareList[1]

                                fh.write(gaUtils.conversion(csurSoftware + "|" + csurSoftwareVersion + "|" + installedSoftwareVersion + "\n"))

                                if re.match(regex, csurSoftware):
                                        continue

                                if installedSoftwareEpoch < csurSoftwareEpoch:
                                        updateSoftwareList.append(csurSoftware + "-")
                fh.close()

                gaUtils.log("updateSoftwareList = " + ":".join(updateSoftwareList), "debug")
                gaUtils.log("End Getting Software Inventory", "info")
                return updateSoftwareList
        #End getSoftwareInventory(csurData)
#End ComputeNode()


class Gen1ScaleUpComputeNode(ComputeNode):

	def getComputeNodeSpecificFirmwareInventory(self, firmwareDict, updateList):
		fh = open(self.gapAnalysisFile, 'a')

		gaUtils.log("Begin Getting Compute Node Specific Firmware Inventory", "info")
		gaUtils.log("firmwareDict = " + str(firmwareDict), "debug")
		gaUtils.log("updateList = " + ":".join(updateList), "debug")

		#Fusion-IO
		command = "fio-status|grep -i -m 1 firmware|awk '{sub(/,/,\"\"); sub(/v/, \"\");print $2\".\"$4}'"
		result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
		out, err = result.communicate()

		if err != '':
			gaUtils.log(err, "error")
		gaUtils.log("out = " + out, "debug")

		installedFirmwareVersion = out.strip()

		fh.write(gaUtils.conversion('FusionIO' + "|" + firmwareDict.get('FusionIO') + "|" + installedFirmwareVersion + "\n"))

		fh.close()
		gaUtils.log("End Getting Compute Node Specific Firmware Inventory", "info")
	#End getComputeNodeSpecificFirmwareInventory(firmwareDict, updateList)


	def getDriverInventory(self, csurData):
		started = False
		updateDriverList = []

		gaUtils.log("Begin Getting Driver Inventory", "info")
		gaUtils.log("csurData = " + ":".join(csurData), "debug")

		fh = open(self.gapAnalysisFile, 'a')

		fh.write(gaUtils.conversion("Driver:\n"))

		regex = re.escape(self.OSDistLevel) + r".*"

		for data in csurData:
			if not re.match(regex, data) and not started:
				continue
			elif re.match(regex, data):
				started = True
				continue
			elif re.match(r'\s*$', data):
				break
			else:
				csurDriverList = data.split('|')
				csurDriver = csurDriverList[0].strip()
				csurDriverVersion = csurDriverList[1].strip()

				if csurDriver == 'FusionIO':
					command = "fio-status -v|awk '{print $1}'|egrep -o \"^[0-9]{1}\.[0-9]{1}\.[0-9]{1}\""
				else:
					command = "modinfo " + csurDriver + "|grep -i ^version|awk '{print $2}'"
				result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
				out, err = result.communicate()

				if err != '':
					gaUtils.log(err, "error")
				gaUtils.log("out = " + out, "debug")

				installedDriverVersion = out.strip()

				fh.write(gaUtils.conversion(csurDriver + "|" + csurDriverVersion + "|" + installedDriverVersion + "\n"))

				if csurDriver == 'FusionIO':
					continue

				if installedDriverVersion != csurDriverVersion:
					updateDriverList.append(csurDriver)
		fh.close()

		gaUtils.log("updateDriverList = " + ":".join(updateDriverList), "debug")
		gaUtils.log("End Getting Driver Inventory", "info")
		return updateDriverList
	#End getDriverInventory(csurData)


	def getSoftwareInventory(self, csurData):
		started = False
		updateSoftwareList = []
		regex = r"^fio|libvsl.*"

		gaUtils.log("Begin Getting Software Inventory", "info")
		gaUtils.log("csurData = " + ":".join(csurData), "debug")

		fh = open(self.gapAnalysisFile, 'a')

		fh.write(gaUtils.conversion("Software:\n"))

		for data in csurData:
			if not re.match(r'Software.*', data) and not started:
				continue
			elif re.match(r'Software.*', data):
				started = True
				continue
			elif re.match(r'\s*$', data):
				break
			else:
				csurSoftwareList = data.split('|')
				csurSoftware = csurSoftwareList[0].strip()
				csurSoftwareEpoch = csurSoftwareList[1].strip()
				csurSoftwareVersion = csurSoftwareList[2].strip()

				command = "rpm -q --queryformat=\"%{buildtime} %{version}-%{release}\" " + csurSoftware + " 2> /dev/null"
				result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
				out, err = result.communicate()

				if err != '':
					gaUtils.log(err, "error")
				gaUtils.log("out = " + out, "debug")

				if result.returncode != 0:
					fh.write(gaUtils.conversion(csurSoftware + "|" + csurSoftwareVersion + "|Missing\n"))
					updateSoftwareList.append(csurSoftware + "-")
					continue

				installedSoftware = out.strip()
				installedSoftwareList = installedSoftware.split()
				installedSoftwareEpoch = installedSoftwareList[0]
				installedSoftwareVersion = installedSoftwareList[1]

				fh.write(gaUtils.conversion(csurSoftware + "|" + csurSoftwareVersion + "|" + installedSoftwareVersion + "\n"))

				if re.match(regex, csurSoftware):
					continue

				if installedSoftwareEpoch < csurSoftwareEpoch:
					updateSoftwareList.append(csurSoftware + "-")
		fh.close()

		gaUtils.log("updateSoftwareList = " + ":".join(updateSoftwareList), "debug")
		gaUtils.log("End Getting Software Inventory", "info")
		return updateSoftwareList
	#End getSoftwareInventory(csurData)
#End Gen1ScaleUpComputeNode(ComputeNode)


class BL680cComputeNode(ComputeNode):

	def getDriverInventory(self, csurData):
		started = False
		updateDriverList = []

		gaUtils.log("Begin Getting Driver Inventory", "info")
		gaUtils.log("csurData = " + ":".join(csurData), "debug")

		fh = open(self.gapAnalysisFile, 'a')

		fh.write(gaUtils.conversion("Driver:\n"))

		regex = re.escape(self.OSDistLevel) + r".*"

		for data in csurData:
			if not re.match(regex, data) and not started:
				continue
			elif re.match(regex, data):
				started = True
				continue
			elif re.match(r'\s*$', data):
				break
			else:
				csurDriverList = data.split('|')
				csurDriver = csurDriverList[0].strip()
				csurDriverVersion = csurDriverList[1].strip()

				if csurDriver == 'nx_nic' or  csurDriver == 'FusionIO':
					continue

				command = "modinfo " + csurDriver + "|grep -i ^version|awk '{print $2}'"
				result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
				out, err = result.communicate()

				if err != '':
					gaUtils.log(err, "error")
				gaUtils.log("out = " + out, "debug")

				installedDriverVersion = out.strip()

				fh.write(gaUtils.conversion(csurDriver + "|" + csurDriverVersion + "|" + installedDriverVersion + "\n"))

				if installedDriverVersion != csurDriverVersion:
					updateDriverList.append(csurDriver)
		fh.close()

		gaUtils.log("updateDriverList = " + ":".join(updateDriverList), "debug")
		gaUtils.log("End Getting Driver Inventory", "info")
		return updateDriverList
	#End getDriverInventory(csurData)


	def getSoftwareInventory(self, csurData):
		started = False
		updateSoftwareList = []

		gaUtils.log("Begin Getting Software Inventory", "info")
		gaUtils.log("csurData = " + ":".join(csurData), "debug")

		fh = open(self.gapAnalysisFile, 'a')

		fh.write(gaUtils.conversion("Software:\n"))

		regex = r"^fio|libvsl.*"

		for data in csurData:
			if not re.match(r'Software.*', data) and not started:
				continue
			elif re.match(r'Software.*', data):
				started = True
				continue
			elif re.match(r'\s*$', data):
				break
			else:
				csurSoftwareList = data.split('|')
				csurSoftware = csurSoftwareList[0].strip()
				csurSoftwareEpoch = csurSoftwareList[1].strip()
				csurSoftwareVersion = csurSoftwareList[2].strip()

				if re.match(regex, csurSoftware):
					continue

				command = "rpm -q --queryformat=\"%{buildtime} %{version}-%{release}\" " + csurSoftware + " 2> /dev/null"
				result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
				out, err = result.communicate()

				if err != '':
					gaUtils.log(err, "error")
				gaUtils.log("out = " + out, "debug")

				if result.returncode != 0:
					fh.write(gaUtils.conversion(csurSoftware + "|" + csurSoftwareVersion + "|Missing\n"))
					updateSoftwareList.append(csurSoftware + "-")
					continue

				installedSoftware = out.strip()
				installedSoftwareList = installedSoftware.split()
				installedSoftwareEpoch = installedSoftwareList[0]
				installedSoftwareVersion = installedSoftwareList[1]

				fh.write(gaUtils.conversion(csurSoftware + "|" + csurSoftwareVersion + "|" + installedSoftwareVersion + "\n"))

				if re.match(regex, csurSoftware):
					continue

				if installedSoftwareEpoch < csurSoftwareEpoch:
					updateSoftwareList.append(csurSoftware + "-")
		fh.close()

		gaUtils.log("updateSoftwareList = " + ":".join(updateSoftwareList), "debug")
		gaUtils.log("End Getting Software Inventory", "info")
		return updateSoftwareList
	#End getSoftwareInventory(csurData)
#End BL680cComputeNode(ComputeNode):


class DL580G8ComputeNode(ComputeNode):

	def getComputeNodeSpecificFirmwareInventory(self, firmwareDict, updateList):
		fh = open(self.gapAnalysisFile, 'a')

		gaUtils.log("Begin Getting Compute Node Specific Firmware Inventory", "info")
		gaUtils.log("firmwareDict = " + str(firmwareDict), "debug")
		gaUtils.log("updateList = " + ":".join(updateList), "debug")

		#Power Management Controller
		fh = open("dmidecode.log", 'w')
		subprocess.call(["dmidecode"], stdout=fh)
		fh.close()

		command = "egrep -A 1 \"^\s*Power Management Controller Firmware\s*$\" dmidecode.log |grep -v Power |sed -e 's/^[ \t]*//'"
		result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
		out, err = result.communicate()

		if err != '':
			gaUtils.log(err, "error")
		gaUtils.log("out = " + out, "debug")

		installedFirmwareVersion = out.strip()

		fh.write(gaUtils.conversion('DL580PMC' + "|" + firmwareDict.get('DL580PMC') + "|" + installedFirmwareVersion + "\n"))

		fh.close()

		os.remove("dmidecode.log")
		gaUtils.log("End Getting Compute Node Specific Firmware Inventory", "info")
	#End getComputeNodeSpecificFirmwareInventory(firmwareDict, updateList)
#End DL580G8ComputeNode(ComputeNode)
